name: Pull Request Checks

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: "22.14.0"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  status-comment:
    name: Status Comment
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: always() && (needs.lint.result == 'success' && needs.test.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Generate coverage summary
        id: coverage
        run: |
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -p "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.lines.pct")
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          else
            echo "coverage=0" >> $GITHUB_OUTPUT
          fi

      - name: Create status comment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 🚀 Status Pull Requesta')
            );

            const coverage = '${{ steps.coverage.outputs.coverage }}';
            const emoji = coverage >= 80 ? '✅' : coverage >= 60 ? '⚠️' : '❌';

            const commentBody = `## 🚀 Status Pull Requesta

            ### ✅ Wszystkie sprawdzenia przeszły pomyślnie!

            | Sprawdzenie | Status |
            |-------------|--------|
            | 🔍 Linting | ✅ Przeszedł |
            | 🧪 Unit Testy | ✅ Przeszedł |
            | 📊 Pokrycie kodu | ${emoji} ${coverage}% |

            ### 📋 Szczegóły
            - **Linting**: Kod przeszedł wszystkie sprawdzenia ESLint
            - **Testy**: Wszystkie testy jednostkowe przeszły pomyślnie
            - **Pokrycie**: ${coverage}% linii kodu pokryte testami

            ${coverage < 60 ? '⚠️ **Uwaga**: Pokrycie kodu jest poniżej 60%. Rozważ dodanie więcej testów.' : ''}
            ${coverage >= 80 ? '🎉 **Świetnie**: Pokrycie kodu jest na wysokim poziomie!' : ''}

            ---
            *Ten komentarz został wygenerowany automatycznie przez GitHub Actions*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  failure-comment:
    name: Failure Comment
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: always() && (needs.lint.result == 'failure' || needs.test.result == 'failure')
    steps:
      - name: Create failure comment
        uses: actions/github-script@v7
        with:
          script: |
            const lintStatus = '${{ needs.lint.result }}' === 'success' ? '✅ Przeszedł' : '❌ Nie przeszedł';
            const testStatus = '${{ needs.test.result }}' === 'success' ? '✅ Przeszedł' : '❌ Nie przeszedł';

            const commentBody = `## ❌ Status Pull Requesta

            ### ⚠️ Niektóre sprawdzenia nie przeszły

            | Sprawdzenie | Status |
            |-------------|--------|
            | 🔍 Linting | ${lintStatus} |
            | 🧪 Unit Testy | ${testStatus} |

            ### 🔧 Co należy zrobić:
            ${'${{ needs.lint.result }}' === 'failure' ? '- **Linting**: Sprawdź błędy ESLint i popraw kod zgodnie z regułami\n' : ''}
            ${'${{ needs.test.result }}' === 'failure' ? '- **Testy**: Sprawdź logi testów i popraw błędy\n' : ''}

            Sprawdź szczegóły w zakładce "Actions" tego PR.

            ---
            *Ten komentarz został wygenerowany automatycznie przez GitHub Actions*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
